// Code generated by MockGen. DO NOT EDIT.
// Source: yt/admin/cms/internal/cms/scheduler_orchid_client.go
//
// Generated by this command:
//
//	mockgen -source yt/admin/cms/internal/cms/scheduler_orchid_client.go -destination yt/admin/cms/internal/cms/scheduler_orchid_client_mock.go -package cms
//
// Package cms is a generated GoMock package.
package cms

import (
	context "context"
	reflect "reflect"

	ypath "go.ytsaurus.tech/yt/go/ypath"
	yt "go.ytsaurus.tech/yt/go/yt"
	gomock "github.com/golang/mock/gomock"
)

// MockSchedulerOrchidClient is a mock of SchedulerOrchidClient interface.
type MockSchedulerOrchidClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerOrchidClientMockRecorder
}

// MockSchedulerOrchidClientMockRecorder is the mock recorder for MockSchedulerOrchidClient.
type MockSchedulerOrchidClientMockRecorder struct {
	mock *MockSchedulerOrchidClient
}

// NewMockSchedulerOrchidClient creates a new mock instance.
func NewMockSchedulerOrchidClient(ctrl *gomock.Controller) *MockSchedulerOrchidClient {
	mock := &MockSchedulerOrchidClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerOrchidClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerOrchidClient) EXPECT() *MockSchedulerOrchidClientMockRecorder {
	return m.recorder
}

// GetNode mocks base method.
func (m *MockSchedulerOrchidClient) GetNode(ctx context.Context, path ypath.YPath, result any, options *yt.GetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, path, result, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockSchedulerOrchidClientMockRecorder) GetNode(ctx, path, result, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockSchedulerOrchidClient)(nil).GetNode), ctx, path, result, options)
}
