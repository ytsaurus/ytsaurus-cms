// Code generated by MockGen. DO NOT EDIT.
// Source: go.ytsaurus.tech/yt/admin/cms/internal/cms (interfaces: StartrekClient)
//
// Generated by this command:
//
//	mockgen -destination=startrek_client_mock.go -package cms . StartrekClient
//

// Package cms is a generated GoMock package.
package cms

import (
	context "context"
	reflect "reflect"

	startrek "go.ytsaurus.tech/yt/admin/cms/internal/startrek"
	gomock "go.uber.org/mock/gomock"
)

// MockStartrekClient is a mock of StartrekClient interface.
type MockStartrekClient struct {
	ctrl     *gomock.Controller
	recorder *MockStartrekClientMockRecorder
	isgomock struct{}
}

// MockStartrekClientMockRecorder is the mock recorder for MockStartrekClient.
type MockStartrekClientMockRecorder struct {
	mock *MockStartrekClient
}

// NewMockStartrekClient creates a new mock instance.
func NewMockStartrekClient(ctrl *gomock.Controller) *MockStartrekClient {
	mock := &MockStartrekClient{ctrl: ctrl}
	mock.recorder = &MockStartrekClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartrekClient) EXPECT() *MockStartrekClientMockRecorder {
	return m.recorder
}

// CloseTicket mocks base method.
func (m *MockStartrekClient) CloseTicket(ctx context.Context, key startrek.TicketKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTicket", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTicket indicates an expected call of CloseTicket.
func (mr *MockStartrekClientMockRecorder) CloseTicket(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTicket", reflect.TypeOf((*MockStartrekClient)(nil).CloseTicket), ctx, key)
}

// CreateTicket mocks base method.
func (m *MockStartrekClient) CreateTicket(ctx context.Context, t *startrek.Ticket) (startrek.TicketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, t)
	ret0, _ := ret[0].(startrek.TicketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockStartrekClientMockRecorder) CreateTicket(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockStartrekClient)(nil).CreateTicket), ctx, t)
}

// LinkTicket mocks base method.
func (m *MockStartrekClient) LinkTicket(ctx context.Context, source, target startrek.TicketKey, r startrek.TicketRelationship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkTicket", ctx, source, target, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkTicket indicates an expected call of LinkTicket.
func (mr *MockStartrekClientMockRecorder) LinkTicket(ctx, source, target, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkTicket", reflect.TypeOf((*MockStartrekClient)(nil).LinkTicket), ctx, source, target, r)
}

// StartProgress mocks base method.
func (m *MockStartrekClient) StartProgress(ctx context.Context, key startrek.TicketKey, assignee string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProgress", ctx, key, assignee)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProgress indicates an expected call of StartProgress.
func (mr *MockStartrekClientMockRecorder) StartProgress(ctx, key, assignee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProgress", reflect.TypeOf((*MockStartrekClient)(nil).StartProgress), ctx, key, assignee)
}
