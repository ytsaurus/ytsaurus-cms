// Code generated by MockGen. DO NOT EDIT.
// Source: go.ytsaurus.tech/yt/admin/cms/internal/cms (interfaces: StartrekClient)

// Package cms is a generated GoMock package.
package cms

import (
	context "context"
	reflect "reflect"

	startrek "go.ytsaurus.tech/yt/admin/cms/internal/startrek"
	gomock "github.com/golang/mock/gomock"
)

// MockStartrekClient is a mock of StartrekClient interface.
type MockStartrekClient struct {
	ctrl     *gomock.Controller
	recorder *MockStartrekClientMockRecorder
}

// MockStartrekClientMockRecorder is the mock recorder for MockStartrekClient.
type MockStartrekClientMockRecorder struct {
	mock *MockStartrekClient
}

// NewMockStartrekClient creates a new mock instance.
func NewMockStartrekClient(ctrl *gomock.Controller) *MockStartrekClient {
	mock := &MockStartrekClient{ctrl: ctrl}
	mock.recorder = &MockStartrekClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartrekClient) EXPECT() *MockStartrekClientMockRecorder {
	return m.recorder
}

// CloseTicket mocks base method.
func (m *MockStartrekClient) CloseTicket(arg0 context.Context, arg1 startrek.TicketKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseTicket indicates an expected call of CloseTicket.
func (mr *MockStartrekClientMockRecorder) CloseTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTicket", reflect.TypeOf((*MockStartrekClient)(nil).CloseTicket), arg0, arg1)
}

// CreateTicket mocks base method.
func (m *MockStartrekClient) CreateTicket(arg0 context.Context, arg1 *startrek.Ticket) (startrek.TicketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1)
	ret0, _ := ret[0].(startrek.TicketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockStartrekClientMockRecorder) CreateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockStartrekClient)(nil).CreateTicket), arg0, arg1)
}

// LinkTicket mocks base method.
func (m *MockStartrekClient) LinkTicket(arg0 context.Context, arg1, arg2 startrek.TicketKey, arg3 startrek.TicketRelationship) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkTicket", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkTicket indicates an expected call of LinkTicket.
func (mr *MockStartrekClientMockRecorder) LinkTicket(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkTicket", reflect.TypeOf((*MockStartrekClient)(nil).LinkTicket), arg0, arg1, arg2, arg3)
}

// StartProgress mocks base method.
func (m *MockStartrekClient) StartProgress(arg0 context.Context, arg1 startrek.TicketKey, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProgress indicates an expected call of StartProgress.
func (mr *MockStartrekClientMockRecorder) StartProgress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProgress", reflect.TypeOf((*MockStartrekClient)(nil).StartProgress), arg0, arg1, arg2)
}
